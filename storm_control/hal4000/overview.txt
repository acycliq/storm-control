
HAL uses a (somewhat) modular message passing architecture in order
to be able to control multiple pieces of hardware with a degree of
parallelization. The basic idea is that GUI elements and hardware
all communicate with each other through HAL who serves as the message
broker. All the HAL really gaurantees is that each module will
receive all the messages in the same order.


The message life cycle:

(1) Created and sent to HAL.

(2) Held in queue by HAL until all the messages in front of it
    have been sent.
    
(3) Sent by HAL to all of the modules.

(4) Modules may add responses or errors to the message.

(5) If the module cannot process the message essentially
    instantaneously it is expected to handle the module to a
    thread and return control of the main thread to HAL.
    Use halLib.halModule.runWorkerTask() for this purpose.
    
(6) When the message is completely processed by the modules
    (or threads they have started) HAL calls the message finalizer
    (if any).
    
(7) HAL informs the sending module (and only the sending module)
    of responses or errors that have been added to the message.


Important message sequences:

(1) Changing of parameters / settings:

    a. 'changing parameters' with "changing" = True - A parameter
       change is about to start, don't touch anything..
       
    b. 'new parameters' - The modules should test / switch to
       the new parameters, or throw an error / warning if there
       is a problem with the new parameters. Also modules are
       expected to add responses to this message with their
       old parameters. If they know what they are they should
       also respond with their new parameters.

    c. 'updated parameters' - The parameters are good and all
       the modules must now switch to the new parameters.

    d. 'parameters changed' - Modules that requested 'wait for'
       at startup for a parameter change send this message when
       they are done changing parameters. This message can also
       include the modules new parameters.
    
    e. 'changing parameters' with "changing" = False - The
       parameter change is complete.


(2) Filming:

    a. 'film lockout' with data "locked out" = True - Filming
       is about to start, don't touch anything..

    b. 'stop camera' - One of these is sent to each camera,
       master cameras are stopped first, then slave cameras.
       
    c. 'start film' - Modules that have special behaviour during
       filming should prepare to start.

    d. 'ready to film' - This comes from the modules that
       requested a wait before starting the film.

    e. 'start camera' - Again, one of these is sent to each
       camera, slave cameras first then master cameras. This is
       also when the filming will actually start as everything
       is driven by the "newFrame" signals from the cameras.

    f. 'stop camera' - Same as (b).

    g. 'stop film' - The film is done, modules are expected to
       add a response to this message containing their current
       parameters.

    h. 'film lockout' with data "locked out" = False - Filming
       is done. This message also includes a copy of the
       current parameters, as some modules such as TCP need
       this information from other modules.


Other message details:

(1) There is a sync message which will block the queue until all
    of the messages that arrived before it are completely
    processed & finalized.

(2) Messages can set a sync flag which will block messages that
    arrive after the message from being processed until the
    message is completely processed & finalized.


Common message types are:

(1) 'configuration' - The properties of a module have changed
    in a way that other modules may be interested in.

(2) 'get functionality' - A module needs something from another
    module, see the explanation of Functionalities below.

(3) 'wait for' - Sent at startup by modules to indicate that
    they will not be ready once they have a processed a message,
    typically because they will need information from other
    modules. A daq module is an example, when it get "start film"
    it still needs all the waveforms before it is actually
    ready for filming.


Functionalities - In addition to sending messages to each other
through HAL modules can request functionalities from other
modules, a display for example might request a camera or feed
functionality to display. These are supposed to encapsulate
some of the behavior a module can provide in a form that it
is easy for other modules to use. We hoped this would solve
two problems: (1) Some of the HAL GUI elements use the same
hardware, for example many stages also control filter wheels,
but (2) As sending messages has some overhead and HAL provides
no gaurantees on timing it would be better to have a more
direct pathway for hardware control than doing everything by
sending messages.

As a rough rule of thumb interaction that will involve lots
of messages between a single sender & receiver that need to
be processed in more or less real time should be done with
functionalities, and everything else should go through HAL
(including requestes for functionalities from other modules).

Note also that functionalities don't provide any timing
gaurantees. If your module gets a message and hands off
some processing to a (buffered) functionality then from
HAL's perspective this message has been completely handled.
If it is important that HAL knows when the processing is
finished then it is better to use halModule.runWorkerTask()
to do the processing. For example, if a piece of hardware
needs to change in response to a 'new parameters' message
it should use hardwareModule.runHardwareTask() to accomplish
this (runHardwareTask is just a wrapper for runWorkerTask).


Feeds - These are derived from a source camera and provide
a degree of processing. They might average camera frames
together, or slice them, or only pass through some fraction
of them. The file 'feed_examples.xml' in the test/hal
directory provides examples of the various options.


Coordinate system(s) - The expectation is that the camera
display is configured to match the stage orientation. So
y-axis motion will cause what is displayed on the camera
to move up/down and x-axis motion will cause what is
displayed on the camera to move left/right. The viewpoint
is as if the camera was flying over the sample, so increasing
y-axis positions will make the sample move down. Failure
to get this right will mean that drag motion does not work
as expected, i.e. the sample will move a different direction
than expected when you ctrl-click on a display and drag
the mouse.
